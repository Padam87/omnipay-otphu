<?php

use Clapp\OtpHu\Gateway as OtpHuGateway;
use Omnipay\Omnipay;
use Omnipay\Common\CreditCard;
use Illuminate\Validaton\ValidationException;

class GatewayTest extends TestCase{
    public function testPurchase(){

        $card = new CreditCard([
            'firstName' => 'Bobby',
            'lastName' => 'Tables',
        ]);

        $gateway = Omnipay::create("\\".OtpHuGateway::class);

        $gateway->setShopId("#02299991");
        $gateway->setPrivateKey(file_get_contents("#02299991.privKey.pem"));

        try {
            $response = $gateway->purchase([
                'amount' => '100.00',
                'currency' => 'HUF',
                'card' => $card,
            ])->send();

            $response->getTransactionReference(); // a reference generated by the payment gateway

            if ($response->isSuccessful()) {
                // payment was successful: update database
                /**
                 * ez sosem történhet meg, mert 3 szereplős fizetést használ az otp,
                 * ami azt jelenti, hogy nem mi kérjük be a bankkártya adatokat, hanem az otp oldala,
                 *
                 * így a terhelés sem sikerülhet anélkül, hogy át ne irányítanánk az otp oldalára
                 */
                print_r($response);
            } elseif ($response->isRedirect()) {
                // redirect to offsite payment gateway
                /**
                 * mindig redirectes választ fogunk kapni a ->puchase()-től, hiszen a háromszereplős fizetés miatt át kell irányítani a felhasználót az otp oldalára
                 */
                //$url = $response->getRedirectUrl();
                //$data = $response->getRedirectData(); // associative array of fields which must be posted to the redirectUrl
                $response->redirect();
            } else {
                // payment failed: display message to customer
                /**
                 * az otp nem fogadta el a terhelési kérésünket
                 */
                echo $response->getMessage();
            }
        catch(ValidationException $e){
            /**
             * hiányzó shopid, hiányzó vagy hibás private key, vagy hiányzó felhasználó adatok
             */
        }
        catch (Exception $e) {
            // internal error, log exception and display a generic message to the customer
            exit('Sorry, there was an error processing your payment. Please try again later.');
        }
    }

    public function testCompletePurchase(){
        $gateway = Omnipay::create("\\".OtpHuGateway::class);

        $gateway->setShopId("#02299991");
        $gateway->setPrivateKey(file_get_contents("#02299991.privKey.pem"));

        try {
            $response = $gateway->purchase([
                'transactionId' => $transactionId,
            ])->send();
            if ($response->isSuccessful()) {
                // payment was successful: update database

                print_r($response);
            }  else {
                // payment failed: display message to customer

                echo $response->getMessage();
            }

        catch (Exception $e) {
            // internal error, log exception and display a generic message to the customer
            exit('Sorry, there was an error processing your payment. Please try again later.');
        }
    }
}
